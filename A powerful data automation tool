import smtplib
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import json
import sqlite3
import sqlalchemy
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import os
import schedule
import time
import logging
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
import plotly.express as px
import dash
import dash_core_components as dcc
import dash_html_components as html
import slack
import twilio
import boto3

# Setup Logging
logging.basicConfig(filename='data_summary.log', level=logging.INFO, format='%(asctime)s:%(levelname)s:%(message)s')

# Email sending function with advanced HTML template and attachment support
def send_email(subject, body, to_email, file_path=None, plot_path=None):
    sender_email = "your_email@gmail.com"
    password = "your_email_password"  # Replace with your actual credentials (not recommended for production)

    try:
        # Set up server connection
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(sender_email, password)

        # Create the email
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = to_email
        msg['Subject'] = subject

        # Attach the email body (HTML template)
        msg.attach(MIMEText(body, 'html'))

        # Attach data file if provided
        if file_path:
            attach_file(msg, file_path)

        # Attach plot image if provided
        if plot_path:
            attach_file(msg, plot_path, is_image=True)

        # Send the email
        server.sendmail(sender_email, to_email, msg.as_string())
        logging.info(f"Email sent to {to_email}")
        server.quit()

    except Exception as e:
        logging.error(f"Failed to send email: {e}")

# Function to attach files (data or images)
def attach_file(msg, file_path, is_image=False):
    filename = os.path.basename(file_path)

    with open(file_path, "rb") as attachment:
        part = MIMEBase("application", "octet-stream")
        part.set_payload(attachment.read())

    encoders.encode_base64(part)
    part.add_header(
        "Content-Disposition",
        f"attachment; filename={filename}",
    )

    if is_image:
        part.add_header('Content-ID', '<image1>')

    msg.attach(part)

# Function to generate data summary and visualizations
def generate_summary(file_path, file_type="csv"):
    try:
        if file_type == "csv":
            df = pd.read_csv(file_path)
        elif file_type == "excel":
            df = pd.read_excel(file_path)
        elif file_type == "json":
            with open(file_path, 'r') as f:
                data = json.load(f)
            df = pd.DataFrame(data)
        elif file_type == "sql":
            engine = sqlalchemy.create_engine('your_database_url')
            df = pd.read_sql_query('your_sql_query', engine)
        else:
            raise ValueError("Unsupported file type.")

        # Basic summary
        summary = df.describe().to_html()

        # Visualization example (bar plot of first two columns)
        plot_path = generate_visualization(df)

        # Return summary and visualization path
        return summary, plot_path

    except Exception as e:
        logging.error(f"Failed to generate summary: {e}")
        return None, None

# Function to generate visualizations (extendable to multiple types)
def generate_visualization(df):
    # Create a figure and subplots
    fig, axs = plt.subplots(1, 3, figsize=(15, 5))

    # Bar plot of first two columns
    sns.barplot(x=df.columns[0], y=df.columns[1], data=df, ax=axs[0])
    axs[0].set_title("Bar Plot")

    # Line plot of first two columns
    sns.lineplot(x=df.columns[0], y=df.columns[1], data=df, ax=axs[1])
    axs[1].set_title("Line Plot")

    # Heatmap of correlations
    sns.heatmap(df.corr(), annot=True, ax=axs[2])
    axs[2].set_title("Correlation Heatmap")

    # Save the plot
    plot_path = 'summary_plot.png'
    plt.tight_layout()
    plt.savefig(plot_path)
    return plot_path

# Advanced analytics - Trend forecasting using linear regression and random forest
def trend_forecasting(df, target_column):
    try:
        X = df.drop(target_column, axis=1)  # Features
        y = df[target_column]  # Target variable

        # Split data into training and testing sets
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Linear regression model
        linear_model = LinearRegression()
        linear_model.fit(X_train, y_train)
        y_pred_linear = linear_model.predict(X_test)
        mse_linear = mean_squared_error(y_test, y_pred_linear)
        r2_linear = r2_score(y_test, y_pred_linear)

        # Random forest model
        random_forest_model = RandomForestRegressor(n_estimators=100, random_state=42)
        random_forest_model.fit(X_train, y_train)
        y_pred_rf = random_forest_model.predict(X_test)
        mse_rf = mean_squared_error(y_test, y_pred_rf)
        r2_rf = r2_score(y_test, y_pred_rf)

        # Create a forecast for future values (based on new data)
        # ... (You can add code here to create a forecast using the trained models)

        return {'linear_regression': {'mse': mse_linear, 'r2': r2_linear},
                'random_forest': {'mse': mse_rf, 'r2': r2_rf}}

    except Exception as e:
        logging.error(f"Failed to perform trend forecasting: {e}")
        return None

# Anomaly detection using statistical methods
def anomaly_detection(df, method='z_score', threshold=3):
    try:
        if method == 'z_score':
            # Calculate z-scores
            z_scores = (df - df.mean()) / df.std()

            # Identify anomalies based on threshold
            anomalies = df[(z_scores > threshold) | (z_scores < -threshold)]

        elif method == 'isolation_forest':
            # ... (Implement isolation forest anomaly detection)

        # Return anomalies
        return anomalies

    except Exception as e:
        logging.error(f"Failed to perform anomaly detection: {e}")
        return None

# Data visualization using Dash
def create_dash_app(df):
    app = dash.Dash(__name__)

    app.layout = html.Div([
        dcc.Dropdown(
            id='dropdown',
            options=[{'label': col, 'value': col} for col in df.columns],
            value=df.columns[0]
        ),
        dcc.Graph(id='graph')
    ])

    @app.callback(
        dash.dependencies.Output('graph', 'figure'),
        [dash.dependencies.Input('dropdown', 'value')]
    )
    def update_graph(selected_column):
        fig = px.histogram(df, x=selected_column)
        return fig

    app.run_server(debug=True)

# Slack integration
def send_slack_message(channel, message):
    # Replace with your Slack bot token and channel ID
    token = 'your_slack_bot
