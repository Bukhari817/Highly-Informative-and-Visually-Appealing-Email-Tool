import pandas as pd
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import matplotlib.pyplot as plt
import seaborn as sns
import schedule
import time
import os
import datetime
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import openai
from sklearn.cluster import KMeans
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import PCA
import plotly.express as px

# Initialize sentiment analyzer, vectorizer, and PCA
sia = SentimentIntensityAnalyzer()
tfidf_vectorizer = TfidfVectorizer()
pca = PCA(n_components=2)

# Email sending function with attachment support
def send_email(subject, body, to_email, file_path=None, plot_path=None):
    # ... (same as before)

# Function to generate a summary and visualizations
def generate_summary(data, columns):
    # ... (same as before)

    # Add sentiment analysis
    data['sentiment'] = data['text'].apply(lambda x: sia.polarity_scores(x)['compound'])

    # ... (rest of the summary generation)

# Function to generate AI-generated insights
def generate_ai_insights(text):
    prompt = f"Analyze the following text and provide insights:\n{text}"
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=prompt,
        max_tokens=1024,
        n=1,
        stop=None,
        temperature=0.5,
    )
    return response.choices[0].text

# Function to perform topic modeling
def perform_topic_modeling(text_data):
    tfidf_matrix = tfidf_vectorizer.fit_transform(text_data)
    num_topics = 3  # Adjust the number of topics as needed
    kmeans = KMeans(n_clusters=num_topics, random_state=42)
    kmeans.fit(tfidf_matrix)
    labels = kmeans.labels_
    return labels

# Function to perform dimensionality reduction
def perform_dimensionality_reduction(tfidf_matrix):
    reduced_data = pca.fit_transform(tfidf_matrix)
    return reduced_data

# Function to schedule the email sending
def schedule_email(subject, body, to_email, file_path, plot_path, interval, unit):
    # ... (same as before)

# Main function
def main():
    # ... (same as before)

    # Generate AI-generated insights
    ai_insights = generate_ai_insights(data['text'].tolist())

    # Perform topic modeling
    topic_labels = perform_topic_modeling(data['text'].tolist())
    data['topic'] = topic_labels

    # Perform dimensionality reduction
    reduced_data = perform_dimensionality_reduction(tfidf_matrix)

    # Add AI insights, topic labels, and dimensionality reduction to the email body
    body += f"<p><strong>AI Insights:</strong></p><p>{ai_insights}</p>"
    body += f"<p><strong>Topic Labels:</strong></p><p>{topic_labels}</p>"

    # Create a 3D scatter plot
    fig = px.scatter_3d(reduced_data, x=0, y=1, z=2, color=topic_labels)
    fig.write_image("topic_scatter_plot.png")

    # ... (rest of the main function)

if __name__ == "__main__":
    main()
